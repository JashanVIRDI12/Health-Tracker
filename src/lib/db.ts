import { prisma } from './prisma'

// Type definitions (these will be generated by Prisma after running prisma generate)
type UserProfile = {
  id: string
  userId: string
  age?: number | null
  gender?: string | null
  weight?: number | null
  height?: number | null
  activityLevel?: string | null
  goalType?: string | null
  targetWeight?: number | null
  weeklyGoal?: number | null
  dailyCalorieGoal: number
  goalMethod: string
  createdAt: Date
  updatedAt: Date
}

type FoodEntry = {
  id: string
  userId: string
  date: Date
  foodId: number
  foodName: string
  calories: number
  protein: number
  carbs: number
  fat: number
  quantity: number
  serving?: string | null
  createdAt: Date
  updatedAt: Date
}

type WorkoutSession = {
  id: string
  userId: string
  date: Date
  workoutName: string
  duration: number
  caloriesBurned: number
  exercises?: any
  createdAt: Date
  updatedAt: Date
}

// User Profile Operations
export async function createUserProfile(userId: string, profileData: Partial<UserProfile>) {
  return await prisma.userProfile.upsert({
    where: { userId },
    update: profileData,
    create: {
      userId,
      ...profileData,
    },
  })
}

export async function getUserProfile(userId: string) {
  return await prisma.userProfile.findUnique({
    where: { userId },
  })
}

export async function updateUserProfile(userId: string, profileData: Partial<UserProfile>) {
  return await prisma.userProfile.update({
    where: { userId },
    data: profileData,
  })
}

// Daily Calorie Goal Operations
export async function getDailyCalorieGoal(userId: string): Promise<number> {
  const profile = await getUserProfile(userId)
  return profile?.dailyCalorieGoal || 2000
}

export async function setDailyCalorieGoal(userId: string, goal: number, method: string = 'manual') {
  return await prisma.userProfile.upsert({
    where: { userId },
    update: { 
      dailyCalorieGoal: goal,
      goalMethod: method 
    },
    create: {
      userId,
      dailyCalorieGoal: goal,
      goalMethod: method,
    },
  })
}

// Food Entry Operations
export async function addFoodEntry(userId: string, foodData: {
  date: Date
  foodId: number
  foodName: string
  calories: number
  protein?: number
  carbs?: number
  fat?: number
  quantity?: number
  serving?: string
}) {
  return await prisma.foodEntry.create({
    data: {
      userId,
      ...foodData,
      protein: foodData.protein || 0,
      carbs: foodData.carbs || 0,
      fat: foodData.fat || 0,
      quantity: foodData.quantity || 1,
    },
  })
}

export async function getFoodEntriesForDate(userId: string, date: Date) {
  const startOfDay = new Date(date)
  startOfDay.setHours(0, 0, 0, 0)
  
  const endOfDay = new Date(date)
  endOfDay.setHours(23, 59, 59, 999)

  return await prisma.foodEntry.findMany({
    where: {
      userId,
      date: {
        gte: startOfDay,
        lte: endOfDay,
      },
    },
    orderBy: { createdAt: 'asc' },
  })
}

export async function getFoodEntriesForWeek(userId: string, startDate: Date) {
  const endDate = new Date(startDate)
  endDate.setDate(startDate.getDate() + 6)
  endDate.setHours(23, 59, 59, 999)

  return await prisma.foodEntry.findMany({
    where: {
      userId,
      date: {
        gte: startDate,
        lte: endDate,
      },
    },
    orderBy: { date: 'asc' },
  })
}

export async function updateFoodEntry(entryId: string, updateData: Partial<FoodEntry>) {
  return await prisma.foodEntry.update({
    where: { id: entryId },
    data: updateData,
  })
}

export async function deleteFoodEntry(entryId: string) {
  return await prisma.foodEntry.delete({
    where: { id: entryId },
  })
}

// Workout Session Operations
export async function addWorkoutSession(userId: string, workoutData: {
  date: Date
  workoutName: string
  duration: number
  caloriesBurned?: number
  exercises?: any
}) {
  return await prisma.workoutSession.create({
    data: {
      userId,
      ...workoutData,
      caloriesBurned: workoutData.caloriesBurned || 0,
    },
  })
}

export async function getWorkoutSessionsForDate(userId: string, date: Date) {
  const startOfDay = new Date(date)
  startOfDay.setHours(0, 0, 0, 0)
  
  const endOfDay = new Date(date)
  endOfDay.setHours(23, 59, 59, 999)

  return await prisma.workoutSession.findMany({
    where: {
      userId,
      date: {
        gte: startOfDay,
        lte: endOfDay,
      },
    },
    orderBy: { createdAt: 'asc' },
  })
}

export async function getWorkoutSessionsForWeek(userId: string, startDate: Date) {
  const endDate = new Date(startDate)
  endDate.setDate(startDate.getDate() + 6)
  endDate.setHours(23, 59, 59, 999)

  return await prisma.workoutSession.findMany({
    where: {
      userId,
      date: {
        gte: startDate,
        lte: endDate,
      },
    },
    orderBy: { date: 'asc' },
  })
}

export async function updateWorkoutSession(sessionId: string, updateData: Partial<WorkoutSession>) {
  return await prisma.workoutSession.update({
    where: { id: sessionId },
    data: updateData,
  })
}

export async function deleteWorkoutSession(sessionId: string) {
  return await prisma.workoutSession.delete({
    where: { id: sessionId },
  })
}

// User Operations
export async function getUserByEmail(email: string) {
  return await prisma.user.findUnique({
    where: { email },
    include: {
      userProfile: true,
    },
  })
}

export async function createUser(userData: {
  name: string
  email: string
  password?: string
}) {
  return await prisma.user.create({
    data: userData,
  })
}
